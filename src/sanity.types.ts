/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type MenuItem = {
  _type: 'menuItem';
  text?: string;
  type?: 'link' | 'child-menu';
  url?: CustomUrl;
  childMenu?: Array<
    {
      _key: string;
    } & MenuItem
  >;
};

export type Button = {
  _type: 'button';
  variant?: 'default' | 'secondary' | 'outline' | 'link';
  text?: string;
  url?: CustomUrl;
};

export type BlockContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        customLink?: CustomUrl;
        _type: 'customLink';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: 'image';
      _key: string;
    }
>;

export type Subscribe = {
  _type: 'subscribe';
  heading?: string;
  content?: BlockContent;
  buttonText?: string;
};

export type Divider = {
  _type: 'divider';
  height?: number;
};

export type CardGrid = {
  _type: 'cardGrid';
  heading?: string;
  content?: BlockContent;
  cards?: Array<{
    heading?: string;
    content?: BlockContent;
    _type: 'card';
    _key: string;
  }>;
};

export type Card = {
  _type: 'card';
  heading?: string;
  content?: BlockContent;
};

export type PostList = {
  _type: 'postList';
  heading?: string;
  numberOfPosts?: number;
};

export type MediaText = {
  _type: 'mediaText';
  heading?: string;
  content?: BlockContent;
  imagePosition?: 'left' | 'right';
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  };
};

export type Hero = {
  _type: 'hero';
  heading?: string;
  text?: BlockContent;
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  };
  buttons?: Array<
    {
      _key: string;
    } & Button
  >;
};

export type Cta = {
  _type: 'cta';
  heading?: string;
  text?: string;
  buttons?: Array<
    {
      _key: string;
    } & Button
  >;
};

export type Category = {
  _id: string;
  _type: 'category';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
};

export type Post = {
  _id: string;
  _type: 'post';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  };
  content?: BlockContent;
  excerpt?: string;
  categories?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'category';
  }>;
  date?: string;
  author?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'person';
  };
  seo?: SeoMetaFields;
};

export type Person = {
  _id: string;
  _type: 'person';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  firstName?: string;
  lastName?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  };
  role?: string;
};

export type Page = {
  _id: string;
  _type: 'page';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  pageSections?: Array<
    | ({
        _key: string;
      } & Cta)
    | ({
        _key: string;
      } & Hero)
    | ({
        _key: string;
      } & MediaText)
    | ({
        _key: string;
      } & PostList)
    | ({
        _key: string;
      } & CardGrid)
    | ({
        _key: string;
      } & Divider)
    | ({
        _key: string;
      } & Subscribe)
  >;
  seo?: SeoMetaFields;
};

export type Slug = {
  _type: 'slug';
  current?: string;
  source?: string;
};

export type BlogPage = {
  _id: string;
  _type: 'blogPage';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  seo?: SeoMetaFields;
};

export type HomePage = {
  _id: string;
  _type: 'homePage';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  pageSections?: Array<
    | ({
        _key: string;
      } & Cta)
    | ({
        _key: string;
      } & Hero)
    | ({
        _key: string;
      } & MediaText)
    | ({
        _key: string;
      } & PostList)
    | ({
        _key: string;
      } & CardGrid)
    | ({
        _key: string;
      } & Divider)
    | ({
        _key: string;
      } & Subscribe)
  >;
  seo?: SeoMetaFields;
};

export type CustomUrl = {
  _type: 'customUrl';
  type?: 'internal' | 'external';
  openInNewTab?: boolean;
  external?: string;
  href?: string;
  internal?:
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'post';
      }
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'page';
      };
};

export type Settings = {
  _id: string;
  _type: 'settings';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  menu?: Array<
    {
      _key: string;
    } & MenuItem
  >;
  description?: string;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    metadataBase?: string;
    _type: 'image';
  };
};

export type MetaTag = {
  _type: 'metaTag';
  metaAttributes?: Array<
    {
      _key: string;
    } & MetaAttribute
  >;
};

export type MetaAttribute = {
  _type: 'metaAttribute';
  attributeKey?: string;
  attributeType?: 'string' | 'image';
  attributeValueImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  attributeValueString?: string;
};

export type SeoMetaFields = {
  _type: 'seoMetaFields';
  nofollowAttributes?: boolean;
  metaTitle?: string;
  metaDescription?: string;
  metaImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  seoKeywords?: Array<string>;
  openGraph?: OpenGraph;
  additionalMetaTags?: Array<
    {
      _key: string;
    } & MetaTag
  >;
  twitter?: Twitter;
};

export type Twitter = {
  _type: 'twitter';
  cardType?: string;
  creator?: string;
  site?: string;
  handle?: string;
};

export type OpenGraph = {
  _type: 'openGraph';
  url?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  title?: string;
  description?: string;
  siteName?: string;
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type SanityAssistInstructionTask = {
  _type: 'sanity.assist.instructionTask';
  path?: string;
  instructionKey?: string;
  started?: string;
  updated?: string;
  info?: string;
};

export type SanityAssistTaskStatus = {
  _type: 'sanity.assist.task.status';
  tasks?: Array<
    {
      _key: string;
    } & SanityAssistInstructionTask
  >;
};

export type SanityAssistSchemaTypeAnnotations = {
  _type: 'sanity.assist.schemaType.annotations';
  title?: string;
  fields?: Array<
    {
      _key: string;
    } & SanityAssistSchemaTypeField
  >;
};

export type SanityAssistOutputType = {
  _type: 'sanity.assist.output.type';
  type?: string;
};

export type SanityAssistOutputField = {
  _type: 'sanity.assist.output.field';
  path?: string;
};

export type SanityAssistInstructionContext = {
  _type: 'sanity.assist.instruction.context';
  reference?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'assist.instruction.context';
  };
};

export type AssistInstructionContext = {
  _id: string;
  _type: 'assist.instruction.context';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  context?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal';
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
};

export type SanityAssistInstructionUserInput = {
  _type: 'sanity.assist.instruction.userInput';
  message?: string;
  description?: string;
};

export type SanityAssistInstructionPrompt = Array<{
  children?: Array<
    | {
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }
    | ({
        _key: string;
      } & SanityAssistInstructionFieldRef)
    | ({
        _key: string;
      } & SanityAssistInstructionContext)
    | ({
        _key: string;
      } & SanityAssistInstructionUserInput)
  >;
  style?: 'normal';
  listItem?: never;
  markDefs?: null;
  level?: number;
  _type: 'block';
  _key: string;
}>;

export type SanityAssistInstructionFieldRef = {
  _type: 'sanity.assist.instruction.fieldRef';
  path?: string;
};

export type SanityAssistInstruction = {
  _type: 'sanity.assist.instruction';
  prompt?: SanityAssistInstructionPrompt;
  icon?: string;
  title?: string;
  userId?: string;
  createdById?: string;
  output?: Array<
    | ({
        _key: string;
      } & SanityAssistOutputField)
    | ({
        _key: string;
      } & SanityAssistOutputType)
  >;
};

export type SanityAssistSchemaTypeField = {
  _type: 'sanity.assist.schemaType.field';
  path?: string;
  instructions?: Array<
    {
      _key: string;
    } & SanityAssistInstruction
  >;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | MenuItem
  | Button
  | BlockContent
  | Subscribe
  | Divider
  | CardGrid
  | Card
  | PostList
  | MediaText
  | Hero
  | Cta
  | Category
  | Post
  | Person
  | Page
  | Slug
  | BlogPage
  | HomePage
  | CustomUrl
  | Settings
  | MetaTag
  | MetaAttribute
  | SeoMetaFields
  | Twitter
  | OpenGraph
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | SanityAssistInstructionTask
  | SanityAssistTaskStatus
  | SanityAssistSchemaTypeAnnotations
  | SanityAssistOutputType
  | SanityAssistOutputField
  | SanityAssistInstructionContext
  | AssistInstructionContext
  | SanityAssistInstructionUserInput
  | SanityAssistInstructionPrompt
  | SanityAssistInstructionFieldRef
  | SanityAssistInstruction
  | SanityAssistSchemaTypeField;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/queries/queries.ts
// Variable: settingsQuery
// Query: *[_type == "settings"][0]{  title,  description,    menu[]{    _type,  _key,  text,  type,    _type,  "openInNewTab": url.openInNewTab,  "href": select(    url.type == "internal" => url.internal->slug.current,    url.type == "external" => url.external,    url.href  ),  childMenu[]{      _type,  _key,  text,  type,    _type,  "openInNewTab": url.openInNewTab,  "href": select(    url.type == "internal" => url.internal->slug.current,    url.type == "external" => url.external,    url.href  )  }  }}
export type SettingsQueryResult = {
  title: string | null;
  description: string | null;
  menu: Array<{
    _type: 'menuItem';
    _key: string;
    text: string | null;
    type: 'child-menu' | 'link' | null;
    openInNewTab: boolean | null;
    href: string | null;
    childMenu: Array<{
      _type: 'menuItem';
      _key: string;
      text: string | null;
      type: 'child-menu' | 'link' | null;
      openInNewTab: boolean | null;
      href: string | null;
    }> | null;
  }> | null;
} | null;
// Variable: homePageQuery
// Query: *[_type == "homePage"][0]{  _id,  _type,  ...,      pageSections[]{    ...,    _type,      _type,  heading,  text,    buttons[]{    text,    variant,    _key,    _type,      _type,  "openInNewTab": url.openInNewTab,  "href": select(    url.type == "internal" => url.internal->slug.current,    url.type == "external" => url.external,    url.href  )  },      _type,  heading,  text,    buttons[]{    text,    variant,    _key,    _type,      _type,  "openInNewTab": url.openInNewTab,  "href": select(    url.type == "internal" => url.internal->slug.current,    url.type == "external" => url.external,    url.href  )  },      _type,  heading,  text,  media,  mediaPosition,    buttons[]{    text,    variant,    _key,    _type,      _type,  "openInNewTab": url.openInNewTab,  "href": select(    url.type == "internal" => url.internal->slug.current,    url.type == "external" => url.external,    url.href  )  },      _type,  heading,  text,    _id,  ...,    content[]{    ...,      markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }  },  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  image,  "categories": categories[]->{title, description},  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  seo {      _type,  metaTitle,  nofollowAttributes,  seoKeywords,  metaDescription,  openGraph {      _type,  siteName,  url,  description,  title,  image {      _type,  crop {    _type,    right,    top,    left,    bottom  },  hotspot {    _type,    x,    y,    height,    width,  },  asset->{...}  }  }  },      _type,  heading,  text,    buttons[]{    text,    variant,    _key,    _type,      _type,  "openInNewTab": url.openInNewTab,  "href": select(    url.type == "internal" => url.internal->slug.current,    url.type == "external" => url.external,    url.href  )  },        _type,  heading,    content[]{    ...,      markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }  },  icon,  cards[]{  _type,  heading,    content[]{    ...,      markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }  },  icon},      _type,  height,      _type,  heading,  text  },  seo {      _type,  metaTitle,  nofollowAttributes,  seoKeywords,  metaDescription,  openGraph {      _type,  siteName,  url,  description,  title,  image {      _type,  crop {    _type,    right,    top,    left,    bottom  },  hotspot {    _type,    x,    y,    height,    width,  },  asset->{...}  }  }  },}
export type HomePageQueryResult = {
  _id: string;
  _type: 'homePage';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  pageSections: Array<
    | {
        _key: string;
        _type: 'cardGrid';
        heading: string | null;
        content: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: 'span';
                _key: string;
              }>;
              style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
              listItem?: 'bullet' | 'number';
              markDefs: Array<
                | {
                    customLink?: CustomUrl;
                    _type: 'customLink';
                    _key: string;
                    openInNewTab: boolean | null;
                    href: string | '#' | null;
                  }
                | {
                    customLink?: CustomUrl;
                    _type: 'customLink';
                    _key: string;
                  }
              > | null;
              level?: number;
              _type: 'block';
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
              };
              hotspot?: SanityImageHotspot;
              crop?: SanityImageCrop;
              alt?: string;
              _type: 'image';
              _key: string;
              markDefs: null;
            }
        > | null;
        cards: Array<{
          _type: 'card';
          heading: string | null;
          content: Array<
            | {
                children?: Array<{
                  marks?: Array<string>;
                  text?: string;
                  _type: 'span';
                  _key: string;
                }>;
                style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
                listItem?: 'bullet' | 'number';
                markDefs: Array<
                  | {
                      customLink?: CustomUrl;
                      _type: 'customLink';
                      _key: string;
                      openInNewTab: boolean | null;
                      href: string | '#' | null;
                    }
                  | {
                      customLink?: CustomUrl;
                      _type: 'customLink';
                      _key: string;
                    }
                > | null;
                level?: number;
                _type: 'block';
                _key: string;
              }
            | {
                asset?: {
                  _ref: string;
                  _type: 'reference';
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
                };
                hotspot?: SanityImageHotspot;
                crop?: SanityImageCrop;
                alt?: string;
                _type: 'image';
                _key: string;
                markDefs: null;
              }
          > | null;
          icon: null;
        }> | null;
        text: null;
        buttons: null;
        media: null;
        mediaPosition: null;
        _id: null;
        status: 'draft' | 'published';
        title: 'Untitled';
        slug: null;
        excerpt: null;
        image: null;
        categories: null;
        date: null;
        author: null;
        seo: null;
        icon: null;
        height: null;
      }
    | {
        _key: string;
        _type: 'cta';
        heading: string | null;
        text: string | null;
        buttons: Array<{
          text: string | null;
          variant: 'default' | 'link' | 'outline' | 'secondary' | null;
          _key: string;
          _type: 'button';
          openInNewTab: boolean | null;
          href: string | null;
        }> | null;
        media: null;
        mediaPosition: null;
        _id: null;
        content: null;
        status: 'draft' | 'published';
        title: 'Untitled';
        slug: null;
        excerpt: null;
        image: null;
        categories: null;
        date: null;
        author: null;
        seo: null;
        icon: null;
        cards: null;
        height: null;
      }
    | {
        _key: string;
        _type: 'divider';
        height: number | null;
        heading: null;
        text: null;
        buttons: null;
        media: null;
        mediaPosition: null;
        _id: null;
        content: null;
        status: 'draft' | 'published';
        title: 'Untitled';
        slug: null;
        excerpt: null;
        image: null;
        categories: null;
        date: null;
        author: null;
        seo: null;
        icon: null;
        cards: null;
      }
    | {
        _key: string;
        _type: 'hero';
        heading: string | null;
        text: BlockContent | null;
        image: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: 'image';
        } | null;
        buttons: Array<{
          text: string | null;
          variant: 'default' | 'link' | 'outline' | 'secondary' | null;
          _key: string;
          _type: 'button';
          openInNewTab: boolean | null;
          href: string | null;
        }> | null;
        media: null;
        mediaPosition: null;
        _id: null;
        content: null;
        status: 'draft' | 'published';
        title: 'Untitled';
        slug: null;
        excerpt: null;
        categories: null;
        date: null;
        author: null;
        seo: null;
        icon: null;
        cards: null;
        height: null;
      }
    | {
        _key: string;
        _type: 'mediaText';
        heading: string | null;
        content: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: 'span';
                _key: string;
              }>;
              style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
              listItem?: 'bullet' | 'number';
              markDefs: Array<
                | {
                    customLink?: CustomUrl;
                    _type: 'customLink';
                    _key: string;
                    openInNewTab: boolean | null;
                    href: string | '#' | null;
                  }
                | {
                    customLink?: CustomUrl;
                    _type: 'customLink';
                    _key: string;
                  }
              > | null;
              level?: number;
              _type: 'block';
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
              };
              hotspot?: SanityImageHotspot;
              crop?: SanityImageCrop;
              alt?: string;
              _type: 'image';
              _key: string;
              markDefs: null;
            }
        > | null;
        imagePosition?: 'left' | 'right';
        image: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: 'image';
        } | null;
        text: null;
        buttons: null;
        media: null;
        mediaPosition: null;
        _id: null;
        status: 'draft' | 'published';
        title: 'Untitled';
        slug: null;
        excerpt: null;
        categories: null;
        date: null;
        author: null;
        seo: null;
        icon: null;
        cards: null;
        height: null;
      }
    | {
        _key: string;
        _type: 'postList';
        heading: string | null;
        numberOfPosts?: number;
        text: null;
        buttons: null;
        media: null;
        mediaPosition: null;
        _id: null;
        content: null;
        status: 'draft' | 'published';
        title: 'Untitled';
        slug: null;
        excerpt: null;
        image: null;
        categories: null;
        date: null;
        author: null;
        seo: null;
        icon: null;
        cards: null;
        height: null;
      }
    | {
        _key: string;
        _type: 'subscribe';
        heading: string | null;
        content: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: 'span';
                _key: string;
              }>;
              style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
              listItem?: 'bullet' | 'number';
              markDefs: Array<
                | {
                    customLink?: CustomUrl;
                    _type: 'customLink';
                    _key: string;
                    openInNewTab: boolean | null;
                    href: string | '#' | null;
                  }
                | {
                    customLink?: CustomUrl;
                    _type: 'customLink';
                    _key: string;
                  }
              > | null;
              level?: number;
              _type: 'block';
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
              };
              hotspot?: SanityImageHotspot;
              crop?: SanityImageCrop;
              alt?: string;
              _type: 'image';
              _key: string;
              markDefs: null;
            }
        > | null;
        buttonText?: string;
        text: null;
        buttons: null;
        media: null;
        mediaPosition: null;
        _id: null;
        status: 'draft' | 'published';
        title: 'Untitled';
        slug: null;
        excerpt: null;
        image: null;
        categories: null;
        date: null;
        author: null;
        seo: null;
        icon: null;
        cards: null;
        height: null;
      }
  > | null;
  seo: {
    _type: 'seoMetaFields';
    metaTitle: string | null;
    nofollowAttributes: boolean | null;
    seoKeywords: Array<string> | null;
    metaDescription: string | null;
    openGraph: {
      _type: 'openGraph';
      siteName: string | null;
      url: string | null;
      description: string | null;
      title: string | null;
      image: {
        _type: 'image';
        crop: {
          _type: 'sanity.imageCrop';
          right: number | null;
          top: number | null;
          left: number | null;
          bottom: number | null;
        } | null;
        hotspot: {
          _type: 'sanity.imageHotspot';
          x: number | null;
          y: number | null;
          height: number | null;
          width: number | null;
        } | null;
        asset: {
          _id: string;
          _type: 'sanity.imageAsset';
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          originalFilename?: string;
          label?: string;
          title?: string;
          description?: string;
          altText?: string;
          sha1hash?: string;
          extension?: string;
          mimeType?: string;
          size?: number;
          assetId?: string;
          uploadId?: string;
          path?: string;
          url?: string;
          metadata?: SanityImageMetadata;
          source?: SanityAssetSourceData;
        } | null;
      } | null;
    } | null;
  } | null;
} | null;
// Variable: getPageQuery
// Query: *[_type == 'page' && slug.current == $slug][0]{    _id,    _type,    name,    slug,        pageSections[]{    ...,    _type,      _type,  heading,  text,    buttons[]{    text,    variant,    _key,    _type,      _type,  "openInNewTab": url.openInNewTab,  "href": select(    url.type == "internal" => url.internal->slug.current,    url.type == "external" => url.external,    url.href  )  },      _type,  heading,  text,    buttons[]{    text,    variant,    _key,    _type,      _type,  "openInNewTab": url.openInNewTab,  "href": select(    url.type == "internal" => url.internal->slug.current,    url.type == "external" => url.external,    url.href  )  },      _type,  heading,  text,  media,  mediaPosition,    buttons[]{    text,    variant,    _key,    _type,      _type,  "openInNewTab": url.openInNewTab,  "href": select(    url.type == "internal" => url.internal->slug.current,    url.type == "external" => url.external,    url.href  )  },      _type,  heading,  text,    _id,  ...,    content[]{    ...,      markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }  },  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  image,  "categories": categories[]->{title, description},  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  seo {      _type,  metaTitle,  nofollowAttributes,  seoKeywords,  metaDescription,  openGraph {      _type,  siteName,  url,  description,  title,  image {      _type,  crop {    _type,    right,    top,    left,    bottom  },  hotspot {    _type,    x,    y,    height,    width,  },  asset->{...}  }  }  },      _type,  heading,  text,    buttons[]{    text,    variant,    _key,    _type,      _type,  "openInNewTab": url.openInNewTab,  "href": select(    url.type == "internal" => url.internal->slug.current,    url.type == "external" => url.external,    url.href  )  },        _type,  heading,    content[]{    ...,      markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }  },  icon,  cards[]{  _type,  heading,    content[]{    ...,      markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }  },  icon},      _type,  height,      _type,  heading,  text  },  seo {      _type,  metaTitle,  nofollowAttributes,  seoKeywords,  metaDescription,  openGraph {      _type,  siteName,  url,  description,  title,  image {      _type,  crop {    _type,    right,    top,    left,    bottom  },  hotspot {    _type,    x,    y,    height,    width,  },  asset->{...}  }  }  },  }
export type GetPageQueryResult = {
  _id: string;
  _type: 'page';
  name: string | null;
  slug: Slug | null;
  pageSections: Array<
    | {
        _key: string;
        _type: 'cardGrid';
        heading: string | null;
        content: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: 'span';
                _key: string;
              }>;
              style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
              listItem?: 'bullet' | 'number';
              markDefs: Array<
                | {
                    customLink?: CustomUrl;
                    _type: 'customLink';
                    _key: string;
                    openInNewTab: boolean | null;
                    href: string | '#' | null;
                  }
                | {
                    customLink?: CustomUrl;
                    _type: 'customLink';
                    _key: string;
                  }
              > | null;
              level?: number;
              _type: 'block';
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
              };
              hotspot?: SanityImageHotspot;
              crop?: SanityImageCrop;
              alt?: string;
              _type: 'image';
              _key: string;
              markDefs: null;
            }
        > | null;
        cards: Array<{
          _type: 'card';
          heading: string | null;
          content: Array<
            | {
                children?: Array<{
                  marks?: Array<string>;
                  text?: string;
                  _type: 'span';
                  _key: string;
                }>;
                style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
                listItem?: 'bullet' | 'number';
                markDefs: Array<
                  | {
                      customLink?: CustomUrl;
                      _type: 'customLink';
                      _key: string;
                      openInNewTab: boolean | null;
                      href: string | '#' | null;
                    }
                  | {
                      customLink?: CustomUrl;
                      _type: 'customLink';
                      _key: string;
                    }
                > | null;
                level?: number;
                _type: 'block';
                _key: string;
              }
            | {
                asset?: {
                  _ref: string;
                  _type: 'reference';
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
                };
                hotspot?: SanityImageHotspot;
                crop?: SanityImageCrop;
                alt?: string;
                _type: 'image';
                _key: string;
                markDefs: null;
              }
          > | null;
          icon: null;
        }> | null;
        text: null;
        buttons: null;
        media: null;
        mediaPosition: null;
        _id: null;
        status: 'draft' | 'published';
        title: 'Untitled';
        slug: null;
        excerpt: null;
        image: null;
        categories: null;
        date: null;
        author: null;
        seo: null;
        icon: null;
        height: null;
      }
    | {
        _key: string;
        _type: 'cta';
        heading: string | null;
        text: string | null;
        buttons: Array<{
          text: string | null;
          variant: 'default' | 'link' | 'outline' | 'secondary' | null;
          _key: string;
          _type: 'button';
          openInNewTab: boolean | null;
          href: string | null;
        }> | null;
        media: null;
        mediaPosition: null;
        _id: null;
        content: null;
        status: 'draft' | 'published';
        title: 'Untitled';
        slug: null;
        excerpt: null;
        image: null;
        categories: null;
        date: null;
        author: null;
        seo: null;
        icon: null;
        cards: null;
        height: null;
      }
    | {
        _key: string;
        _type: 'divider';
        height: number | null;
        heading: null;
        text: null;
        buttons: null;
        media: null;
        mediaPosition: null;
        _id: null;
        content: null;
        status: 'draft' | 'published';
        title: 'Untitled';
        slug: null;
        excerpt: null;
        image: null;
        categories: null;
        date: null;
        author: null;
        seo: null;
        icon: null;
        cards: null;
      }
    | {
        _key: string;
        _type: 'hero';
        heading: string | null;
        text: BlockContent | null;
        image: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: 'image';
        } | null;
        buttons: Array<{
          text: string | null;
          variant: 'default' | 'link' | 'outline' | 'secondary' | null;
          _key: string;
          _type: 'button';
          openInNewTab: boolean | null;
          href: string | null;
        }> | null;
        media: null;
        mediaPosition: null;
        _id: null;
        content: null;
        status: 'draft' | 'published';
        title: 'Untitled';
        slug: null;
        excerpt: null;
        categories: null;
        date: null;
        author: null;
        seo: null;
        icon: null;
        cards: null;
        height: null;
      }
    | {
        _key: string;
        _type: 'mediaText';
        heading: string | null;
        content: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: 'span';
                _key: string;
              }>;
              style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
              listItem?: 'bullet' | 'number';
              markDefs: Array<
                | {
                    customLink?: CustomUrl;
                    _type: 'customLink';
                    _key: string;
                    openInNewTab: boolean | null;
                    href: string | '#' | null;
                  }
                | {
                    customLink?: CustomUrl;
                    _type: 'customLink';
                    _key: string;
                  }
              > | null;
              level?: number;
              _type: 'block';
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
              };
              hotspot?: SanityImageHotspot;
              crop?: SanityImageCrop;
              alt?: string;
              _type: 'image';
              _key: string;
              markDefs: null;
            }
        > | null;
        imagePosition?: 'left' | 'right';
        image: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: 'image';
        } | null;
        text: null;
        buttons: null;
        media: null;
        mediaPosition: null;
        _id: null;
        status: 'draft' | 'published';
        title: 'Untitled';
        slug: null;
        excerpt: null;
        categories: null;
        date: null;
        author: null;
        seo: null;
        icon: null;
        cards: null;
        height: null;
      }
    | {
        _key: string;
        _type: 'postList';
        heading: string | null;
        numberOfPosts?: number;
        text: null;
        buttons: null;
        media: null;
        mediaPosition: null;
        _id: null;
        content: null;
        status: 'draft' | 'published';
        title: 'Untitled';
        slug: null;
        excerpt: null;
        image: null;
        categories: null;
        date: null;
        author: null;
        seo: null;
        icon: null;
        cards: null;
        height: null;
      }
    | {
        _key: string;
        _type: 'subscribe';
        heading: string | null;
        content: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: 'span';
                _key: string;
              }>;
              style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
              listItem?: 'bullet' | 'number';
              markDefs: Array<
                | {
                    customLink?: CustomUrl;
                    _type: 'customLink';
                    _key: string;
                    openInNewTab: boolean | null;
                    href: string | '#' | null;
                  }
                | {
                    customLink?: CustomUrl;
                    _type: 'customLink';
                    _key: string;
                  }
              > | null;
              level?: number;
              _type: 'block';
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
              };
              hotspot?: SanityImageHotspot;
              crop?: SanityImageCrop;
              alt?: string;
              _type: 'image';
              _key: string;
              markDefs: null;
            }
        > | null;
        buttonText?: string;
        text: null;
        buttons: null;
        media: null;
        mediaPosition: null;
        _id: null;
        status: 'draft' | 'published';
        title: 'Untitled';
        slug: null;
        excerpt: null;
        image: null;
        categories: null;
        date: null;
        author: null;
        seo: null;
        icon: null;
        cards: null;
        height: null;
      }
  > | null;
  seo: {
    _type: 'seoMetaFields';
    metaTitle: string | null;
    nofollowAttributes: boolean | null;
    seoKeywords: Array<string> | null;
    metaDescription: string | null;
    openGraph: {
      _type: 'openGraph';
      siteName: string | null;
      url: string | null;
      description: string | null;
      title: string | null;
      image: {
        _type: 'image';
        crop: {
          _type: 'sanity.imageCrop';
          right: number | null;
          top: number | null;
          left: number | null;
          bottom: number | null;
        } | null;
        hotspot: {
          _type: 'sanity.imageHotspot';
          x: number | null;
          y: number | null;
          height: number | null;
          width: number | null;
        } | null;
        asset: {
          _id: string;
          _type: 'sanity.imageAsset';
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          originalFilename?: string;
          label?: string;
          title?: string;
          description?: string;
          altText?: string;
          sha1hash?: string;
          extension?: string;
          mimeType?: string;
          size?: number;
          assetId?: string;
          uploadId?: string;
          path?: string;
          url?: string;
          metadata?: SanityImageMetadata;
          source?: SanityAssetSourceData;
        } | null;
      } | null;
    } | null;
  } | null;
} | null;
// Variable: allPostsQuery
// Query: *[_type == "post" && defined(slug.current)] | order(date desc, _updatedAt desc) {      _id,  ...,    content[]{    ...,      markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }  },  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  image,  "categories": categories[]->{title, description},  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  seo {      _type,  metaTitle,  nofollowAttributes,  seoKeywords,  metaDescription,  openGraph {      _type,  siteName,  url,  description,  title,  image {      _type,  crop {    _type,    right,    top,    left,    bottom  },  hotspot {    _type,    x,    y,    height,    width,  },  asset->{...}  }  }  }  }
export type AllPostsQueryResult = Array<{
  _id: string;
  _type: 'post';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string | 'Untitled';
  slug: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  } | null;
  content: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
        listItem?: 'bullet' | 'number';
        markDefs: Array<
          | {
              customLink?: CustomUrl;
              _type: 'customLink';
              _key: string;
              openInNewTab: boolean | null;
              href: string | '#' | null;
            }
          | {
              customLink?: CustomUrl;
              _type: 'customLink';
              _key: string;
            }
        > | null;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'image';
        _key: string;
        markDefs: null;
      }
  > | null;
  excerpt: string | null;
  categories: Array<{
    title: string | null;
    description: string | null;
  }> | null;
  date: string;
  author: {
    firstName: string | null;
    lastName: string | null;
    picture: null;
  } | null;
  seo: {
    _type: 'seoMetaFields';
    metaTitle: string | null;
    nofollowAttributes: boolean | null;
    seoKeywords: Array<string> | null;
    metaDescription: string | null;
    openGraph: {
      _type: 'openGraph';
      siteName: string | null;
      url: string | null;
      description: string | null;
      title: string | null;
      image: {
        _type: 'image';
        crop: {
          _type: 'sanity.imageCrop';
          right: number | null;
          top: number | null;
          left: number | null;
          bottom: number | null;
        } | null;
        hotspot: {
          _type: 'sanity.imageHotspot';
          x: number | null;
          y: number | null;
          height: number | null;
          width: number | null;
        } | null;
        asset: {
          _id: string;
          _type: 'sanity.imageAsset';
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          originalFilename?: string;
          label?: string;
          title?: string;
          description?: string;
          altText?: string;
          sha1hash?: string;
          extension?: string;
          mimeType?: string;
          size?: number;
          assetId?: string;
          uploadId?: string;
          path?: string;
          url?: string;
          metadata?: SanityImageMetadata;
          source?: SanityAssetSourceData;
        } | null;
      } | null;
    } | null;
  } | null;
  status: 'draft' | 'published';
}>;
// Variable: morePostsQuery
// Query: *[_type == "post" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {      _id,  ...,    content[]{    ...,      markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }  },  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  image,  "categories": categories[]->{title, description},  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  seo {      _type,  metaTitle,  nofollowAttributes,  seoKeywords,  metaDescription,  openGraph {      _type,  siteName,  url,  description,  title,  image {      _type,  crop {    _type,    right,    top,    left,    bottom  },  hotspot {    _type,    x,    y,    height,    width,  },  asset->{...}  }  }  }  }
export type MorePostsQueryResult = Array<{
  _id: string;
  _type: 'post';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string | 'Untitled';
  slug: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  } | null;
  content: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
        listItem?: 'bullet' | 'number';
        markDefs: Array<
          | {
              customLink?: CustomUrl;
              _type: 'customLink';
              _key: string;
              openInNewTab: boolean | null;
              href: string | '#' | null;
            }
          | {
              customLink?: CustomUrl;
              _type: 'customLink';
              _key: string;
            }
        > | null;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'image';
        _key: string;
        markDefs: null;
      }
  > | null;
  excerpt: string | null;
  categories: Array<{
    title: string | null;
    description: string | null;
  }> | null;
  date: string;
  author: {
    firstName: string | null;
    lastName: string | null;
    picture: null;
  } | null;
  seo: {
    _type: 'seoMetaFields';
    metaTitle: string | null;
    nofollowAttributes: boolean | null;
    seoKeywords: Array<string> | null;
    metaDescription: string | null;
    openGraph: {
      _type: 'openGraph';
      siteName: string | null;
      url: string | null;
      description: string | null;
      title: string | null;
      image: {
        _type: 'image';
        crop: {
          _type: 'sanity.imageCrop';
          right: number | null;
          top: number | null;
          left: number | null;
          bottom: number | null;
        } | null;
        hotspot: {
          _type: 'sanity.imageHotspot';
          x: number | null;
          y: number | null;
          height: number | null;
          width: number | null;
        } | null;
        asset: {
          _id: string;
          _type: 'sanity.imageAsset';
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          originalFilename?: string;
          label?: string;
          title?: string;
          description?: string;
          altText?: string;
          sha1hash?: string;
          extension?: string;
          mimeType?: string;
          size?: number;
          assetId?: string;
          uploadId?: string;
          path?: string;
          url?: string;
          metadata?: SanityImageMetadata;
          source?: SanityAssetSourceData;
        } | null;
      } | null;
    } | null;
  } | null;
  status: 'draft' | 'published';
}>;
// Variable: postQuery
// Query: *[_type == "post" && slug.current == $slug] [0] {      _id,  ...,    content[]{    ...,      markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }  },  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  image,  "categories": categories[]->{title, description},  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  seo {      _type,  metaTitle,  nofollowAttributes,  seoKeywords,  metaDescription,  openGraph {      _type,  siteName,  url,  description,  title,  image {      _type,  crop {    _type,    right,    top,    left,    bottom  },  hotspot {    _type,    x,    y,    height,    width,  },  asset->{...}  }  }  }  }
export type PostQueryResult = {
  _id: string;
  _type: 'post';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string | 'Untitled';
  slug: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  } | null;
  content: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
        listItem?: 'bullet' | 'number';
        markDefs: Array<
          | {
              customLink?: CustomUrl;
              _type: 'customLink';
              _key: string;
              openInNewTab: boolean | null;
              href: string | '#' | null;
            }
          | {
              customLink?: CustomUrl;
              _type: 'customLink';
              _key: string;
            }
        > | null;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'image';
        _key: string;
        markDefs: null;
      }
  > | null;
  excerpt: string | null;
  categories: Array<{
    title: string | null;
    description: string | null;
  }> | null;
  date: string;
  author: {
    firstName: string | null;
    lastName: string | null;
    picture: null;
  } | null;
  seo: {
    _type: 'seoMetaFields';
    metaTitle: string | null;
    nofollowAttributes: boolean | null;
    seoKeywords: Array<string> | null;
    metaDescription: string | null;
    openGraph: {
      _type: 'openGraph';
      siteName: string | null;
      url: string | null;
      description: string | null;
      title: string | null;
      image: {
        _type: 'image';
        crop: {
          _type: 'sanity.imageCrop';
          right: number | null;
          top: number | null;
          left: number | null;
          bottom: number | null;
        } | null;
        hotspot: {
          _type: 'sanity.imageHotspot';
          x: number | null;
          y: number | null;
          height: number | null;
          width: number | null;
        } | null;
        asset: {
          _id: string;
          _type: 'sanity.imageAsset';
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          originalFilename?: string;
          label?: string;
          title?: string;
          description?: string;
          altText?: string;
          sha1hash?: string;
          extension?: string;
          mimeType?: string;
          size?: number;
          assetId?: string;
          uploadId?: string;
          path?: string;
          url?: string;
          metadata?: SanityImageMetadata;
          source?: SanityAssetSourceData;
        } | null;
      } | null;
    } | null;
  } | null;
  status: 'draft' | 'published';
} | null;
// Variable: postPagesSlugs
// Query: *[_type == "post" && defined(slug.current)]  {"slug": slug.current}
export type PostPagesSlugsResult = Array<{
  slug: string | null;
}>;
// Variable: pagesSlugs
// Query: *[_type == "page" && defined(slug.current)]  {"slug": slug.current}
export type PagesSlugsResult = Array<{
  slug: string | null;
}>;

// Query TypeMap
import '@sanity/client';
declare module '@sanity/client' {
  interface SanityQueries {
    '*[_type == "settings"][0]{\n  title,\n  description,\n  \n  menu[]{\n  \n  _type,\n  _key,\n  text,\n  type,\n  \n  _type,\n  "openInNewTab": url.openInNewTab,\n  "href": select(\n    url.type == "internal" => url.internal->slug.current,\n    url.type == "external" => url.external,\n    url.href\n  )\n\n,\n  childMenu[]{\n    \n  _type,\n  _key,\n  text,\n  type,\n  \n  _type,\n  "openInNewTab": url.openInNewTab,\n  "href": select(\n    url.type == "internal" => url.internal->slug.current,\n    url.type == "external" => url.external,\n    url.href\n  )\n\n\n  }\n  }\n\n}': SettingsQueryResult;
    '*[_type == "homePage"][0]{\n  _id,\n  _type,\n  ...,\n  \n  \n  pageSections[]{\n    ...,\n    _type,\n    \n  _type,\n  heading,\n  text,\n  \n  buttons[]{\n    text,\n    variant,\n    _key,\n    _type,\n    \n  _type,\n  "openInNewTab": url.openInNewTab,\n  "href": select(\n    url.type == "internal" => url.internal->slug.current,\n    url.type == "external" => url.external,\n    url.href\n  )\n\n  }\n\n,\n    \n  _type,\n  heading,\n  text,\n  \n  buttons[]{\n    text,\n    variant,\n    _key,\n    _type,\n    \n  _type,\n  "openInNewTab": url.openInNewTab,\n  "href": select(\n    url.type == "internal" => url.internal->slug.current,\n    url.type == "external" => url.external,\n    url.href\n  )\n\n  }\n\n,\n    \n  _type,\n  heading,\n  text,\n  media,\n  mediaPosition,\n  \n  buttons[]{\n    text,\n    variant,\n    _key,\n    _type,\n    \n  _type,\n  "openInNewTab": url.openInNewTab,\n  "href": select(\n    url.type == "internal" => url.internal->slug.current,\n    url.type == "external" => url.external,\n    url.href\n  )\n\n  }\n\n,\n    \n  _type,\n  heading,\n  text,\n  \n  _id,\n  ...,\n  \n  content[]{\n    ...,\n    \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n  }\n,\n  "status": select(_originalId in path("drafts.**") => "draft", "published"),\n  "title": coalesce(title, "Untitled"),\n  "slug": slug.current,\n  excerpt,\n  image,\n  "categories": categories[]->{title, description},\n  "date": coalesce(date, _updatedAt),\n  "author": author->{firstName, lastName, picture},\n  seo {\n    \n  _type,\n  metaTitle,\n  nofollowAttributes,\n  seoKeywords,\n  metaDescription,\n  openGraph {\n    \n  _type,\n  siteName,\n  url,\n  description,\n  title,\n  image {\n    \n  _type,\n  crop {\n    _type,\n    right,\n    top,\n    left,\n    bottom\n  },\n  hotspot {\n    _type,\n    x,\n    y,\n    height,\n    width,\n  },\n  asset->{...}\n\n  }\n\n  }\n  }\n\n,\n    \n  _type,\n  heading,\n  text,\n  \n  buttons[]{\n    text,\n    variant,\n    _key,\n    _type,\n    \n  _type,\n  "openInNewTab": url.openInNewTab,\n  "href": select(\n    url.type == "internal" => url.internal->slug.current,\n    url.type == "external" => url.external,\n    url.href\n  )\n\n  }\n\n,\n    \n  \n  _type,\n  heading,\n  \n  content[]{\n    ...,\n    \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n  }\n,\n  icon\n,\n  cards[]{\n  _type,\n  heading,\n  \n  content[]{\n    ...,\n    \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n  }\n,\n  icon\n}\n,\n    \n  _type,\n  height\n,\n    \n  _type,\n  heading,\n  text\n\n  }\n,\n  seo {\n    \n  _type,\n  metaTitle,\n  nofollowAttributes,\n  seoKeywords,\n  metaDescription,\n  openGraph {\n    \n  _type,\n  siteName,\n  url,\n  description,\n  title,\n  image {\n    \n  _type,\n  crop {\n    _type,\n    right,\n    top,\n    left,\n    bottom\n  },\n  hotspot {\n    _type,\n    x,\n    y,\n    height,\n    width,\n  },\n  asset->{...}\n\n  }\n\n  }\n  },\n\n}': HomePageQueryResult;
    '\n  *[_type == \'page\' && slug.current == $slug][0]{\n    _id,\n    _type,\n    name,\n    slug,\n    \n  \n  pageSections[]{\n    ...,\n    _type,\n    \n  _type,\n  heading,\n  text,\n  \n  buttons[]{\n    text,\n    variant,\n    _key,\n    _type,\n    \n  _type,\n  "openInNewTab": url.openInNewTab,\n  "href": select(\n    url.type == "internal" => url.internal->slug.current,\n    url.type == "external" => url.external,\n    url.href\n  )\n\n  }\n\n,\n    \n  _type,\n  heading,\n  text,\n  \n  buttons[]{\n    text,\n    variant,\n    _key,\n    _type,\n    \n  _type,\n  "openInNewTab": url.openInNewTab,\n  "href": select(\n    url.type == "internal" => url.internal->slug.current,\n    url.type == "external" => url.external,\n    url.href\n  )\n\n  }\n\n,\n    \n  _type,\n  heading,\n  text,\n  media,\n  mediaPosition,\n  \n  buttons[]{\n    text,\n    variant,\n    _key,\n    _type,\n    \n  _type,\n  "openInNewTab": url.openInNewTab,\n  "href": select(\n    url.type == "internal" => url.internal->slug.current,\n    url.type == "external" => url.external,\n    url.href\n  )\n\n  }\n\n,\n    \n  _type,\n  heading,\n  text,\n  \n  _id,\n  ...,\n  \n  content[]{\n    ...,\n    \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n  }\n,\n  "status": select(_originalId in path("drafts.**") => "draft", "published"),\n  "title": coalesce(title, "Untitled"),\n  "slug": slug.current,\n  excerpt,\n  image,\n  "categories": categories[]->{title, description},\n  "date": coalesce(date, _updatedAt),\n  "author": author->{firstName, lastName, picture},\n  seo {\n    \n  _type,\n  metaTitle,\n  nofollowAttributes,\n  seoKeywords,\n  metaDescription,\n  openGraph {\n    \n  _type,\n  siteName,\n  url,\n  description,\n  title,\n  image {\n    \n  _type,\n  crop {\n    _type,\n    right,\n    top,\n    left,\n    bottom\n  },\n  hotspot {\n    _type,\n    x,\n    y,\n    height,\n    width,\n  },\n  asset->{...}\n\n  }\n\n  }\n  }\n\n,\n    \n  _type,\n  heading,\n  text,\n  \n  buttons[]{\n    text,\n    variant,\n    _key,\n    _type,\n    \n  _type,\n  "openInNewTab": url.openInNewTab,\n  "href": select(\n    url.type == "internal" => url.internal->slug.current,\n    url.type == "external" => url.external,\n    url.href\n  )\n\n  }\n\n,\n    \n  \n  _type,\n  heading,\n  \n  content[]{\n    ...,\n    \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n  }\n,\n  icon\n,\n  cards[]{\n  _type,\n  heading,\n  \n  content[]{\n    ...,\n    \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n  }\n,\n  icon\n}\n,\n    \n  _type,\n  height\n,\n    \n  _type,\n  heading,\n  text\n\n  }\n,\n  seo {\n    \n  _type,\n  metaTitle,\n  nofollowAttributes,\n  seoKeywords,\n  metaDescription,\n  openGraph {\n    \n  _type,\n  siteName,\n  url,\n  description,\n  title,\n  image {\n    \n  _type,\n  crop {\n    _type,\n    right,\n    top,\n    left,\n    bottom\n  },\n  hotspot {\n    _type,\n    x,\n    y,\n    height,\n    width,\n  },\n  asset->{...}\n\n  }\n\n  }\n  },\n\n  }\n': GetPageQueryResult;
    '\n  *[_type == "post" && defined(slug.current)] | order(date desc, _updatedAt desc) {\n    \n  _id,\n  ...,\n  \n  content[]{\n    ...,\n    \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n  }\n,\n  "status": select(_originalId in path("drafts.**") => "draft", "published"),\n  "title": coalesce(title, "Untitled"),\n  "slug": slug.current,\n  excerpt,\n  image,\n  "categories": categories[]->{title, description},\n  "date": coalesce(date, _updatedAt),\n  "author": author->{firstName, lastName, picture},\n  seo {\n    \n  _type,\n  metaTitle,\n  nofollowAttributes,\n  seoKeywords,\n  metaDescription,\n  openGraph {\n    \n  _type,\n  siteName,\n  url,\n  description,\n  title,\n  image {\n    \n  _type,\n  crop {\n    _type,\n    right,\n    top,\n    left,\n    bottom\n  },\n  hotspot {\n    _type,\n    x,\n    y,\n    height,\n    width,\n  },\n  asset->{...}\n\n  }\n\n  }\n  }\n\n  }\n': AllPostsQueryResult;
    '\n  *[_type == "post" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {\n    \n  _id,\n  ...,\n  \n  content[]{\n    ...,\n    \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n  }\n,\n  "status": select(_originalId in path("drafts.**") => "draft", "published"),\n  "title": coalesce(title, "Untitled"),\n  "slug": slug.current,\n  excerpt,\n  image,\n  "categories": categories[]->{title, description},\n  "date": coalesce(date, _updatedAt),\n  "author": author->{firstName, lastName, picture},\n  seo {\n    \n  _type,\n  metaTitle,\n  nofollowAttributes,\n  seoKeywords,\n  metaDescription,\n  openGraph {\n    \n  _type,\n  siteName,\n  url,\n  description,\n  title,\n  image {\n    \n  _type,\n  crop {\n    _type,\n    right,\n    top,\n    left,\n    bottom\n  },\n  hotspot {\n    _type,\n    x,\n    y,\n    height,\n    width,\n  },\n  asset->{...}\n\n  }\n\n  }\n  }\n\n  }\n': MorePostsQueryResult;
    '\n  *[_type == "post" && slug.current == $slug] [0] {\n    \n  _id,\n  ...,\n  \n  content[]{\n    ...,\n    \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n  }\n,\n  "status": select(_originalId in path("drafts.**") => "draft", "published"),\n  "title": coalesce(title, "Untitled"),\n  "slug": slug.current,\n  excerpt,\n  image,\n  "categories": categories[]->{title, description},\n  "date": coalesce(date, _updatedAt),\n  "author": author->{firstName, lastName, picture},\n  seo {\n    \n  _type,\n  metaTitle,\n  nofollowAttributes,\n  seoKeywords,\n  metaDescription,\n  openGraph {\n    \n  _type,\n  siteName,\n  url,\n  description,\n  title,\n  image {\n    \n  _type,\n  crop {\n    _type,\n    right,\n    top,\n    left,\n    bottom\n  },\n  hotspot {\n    _type,\n    x,\n    y,\n    height,\n    width,\n  },\n  asset->{...}\n\n  }\n\n  }\n  }\n\n  }\n': PostQueryResult;
    '\n  *[_type == "post" && defined(slug.current)]\n  {"slug": slug.current}\n': PostPagesSlugsResult;
    '\n  *[_type == "page" && defined(slug.current)]\n  {"slug": slug.current}\n': PagesSlugsResult;
  }
}
